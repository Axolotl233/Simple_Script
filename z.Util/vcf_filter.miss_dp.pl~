#! perl

use warnings;
use strict;
use MCE::Loop;
use Getopt::Long;
use File::Basename;

(my $m,my $d,my $threads,my $depth_ref);
GetOptions(
           'd=s' => \$d,
           'm=s' => \$m,
           't=s' => \$threads,
          );
my $vcf_dir = shift or die "USAGE : perl $0 \$vcf_dir -d Dp_max,Dp_min,Qual -m miss_rate -t threads \n";
my @args = split/,/,$d;
my @vcfs = sort{$a cmp $b} grep{/\.vcf$/} `find $vcf_dir`;
chomp $_ for @vcfs;
MCE::Loop::init {chunk_size => 1,max_workers => $threads};
mce_loop{ &run($_) } @vcfs;

sub run{
    my $f = shift @_;
    (my $head,my $heads_ref) = &get_head($f);
    my @heads = @{$heads_ref};
    my $c = scalar(@heads);
    (my $chr = basename $f) =~ s/(.*?)\..*/$1/;
    my $new = $chr;
    if($d){
        $new .= "\.dp_qual";
    }
    if($m){
        $new .= "\.miss";
    }
    $new .= ".vcf";
    open O, '>',"$vcf_dir/$new";
    print O $head;
    open IN,'<',$f;
    while(<IN>){
        next if /^#/;
        chomp;
        my $jud = "print";
        my @l = split/\t/;
        if($d){
            $jud = &dp_range_filter(\@l,$c);
        }
        if($m){
            $jud = &miss_filter(\@l,$c);
        }
        if($jud eq "print"){
            print O join"\t",@l;
            print O "\n";
        }
    }
    close IN;
    close O;
    unlink $f;
}

sub dp_range_filter{
    my $ref = shift @_;
    my $c1 = shift @_;
    my @l = @{$ref};
    my $qual = $l[5];
    (my $dp = $l[7] )=~s/.*;DP=(.*?);.*/$1/;
    my $num = $c1 - 9;
    my $site_max= $args[0]*$num;
    my $site_min= $args[1]*$num;
    unless($dp >= $site_min && $dp <= $site_max){
        return "filter";
    }
    unless($qual >= $args[2]){
        return "filter";
    }    
    return "print";
}

sub miss_filter{
    my $ref = shift @_;
    my $c2 = shift @_;
    my @a = @{$ref};
    my $n = 0;
    my $miss_max= ($c2-9) * $m;
    for (my $i=9;$i<@a;$i++){
        if ($a[$i]=~/\.\/\./){
            $n++;
        }else{next;}
    }
    if ($n>$miss_max){
        return "filter";
    }else{
        return "print";
    }
}

sub get_head{
    my $f = shift @_;
    (my $h, my @hs);
    open IN,'<',$f or die "$!";
    while(<IN>){
        if(/^##/){
            $h .= $_;
        }elsif(/^#C/){
            $h .= $_;
            @hs = split/\t/,$_;
            chomp $_ for @hs;
            last;
        }
    }
    close IN;
    return($h,\@hs)
}
